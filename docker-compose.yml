services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai_optimization_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-aioptimization}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-aioptimization}
      POSTGRES_DB: ${POSTGRES_DB:-aioptimization}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-aioptimization}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - ai_optimization_network
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Redis Cache & Tracking Data Store
  redis:
    image: redis:7-alpine
    container_name: ai_optimization_redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - ai_optimization_network
    volumes:
      - redis_data:/data

  # Backend API
  backend:
    build:
      context: .
      dockerfile: ../Dockerfile.backend
    container_name: ai_optimization_backend
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      # API Keys (set these in a .env file in the project root for security)
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # Database
      - DATABASE_URL=postgresql://${POSTGRES_USER:-aioptimization}:${POSTGRES_PASSWORD:-aioptimization}@postgres:5432/${POSTGRES_DB:-aioptimization}
      
      # Redis
      - REDIS_URL=redis://redis:6379
      
      # Application Settings
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-false}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      
      # Tracking
      - ENABLE_REAL_TRACKING=${ENABLE_REAL_TRACKING:-true}
      - GEOIP_PATH=/app/GeoLite2-City.mmdb
      
      # CORS
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:3001}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 5 &&
        echo 'Starting application...' &&
        python -m uvicorn api:app --host 0.0.0.0 --port 8000
      "
    restart: unless-stopped
    networks:
      - ai_optimization_network

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: ../Dockerfile.frontend
    container_name: ai_optimization_frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - ai_optimization_network

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: ai_optimization_nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    depends_on:
      - backend
      - frontend
    profiles:
      - production
    restart: unless-stopped
    networks:
      - ai_optimization_network
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro

networks:
  ai_optimization_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  redis_data:

# NOTE: Set your ANTHROPIC_API_KEY and OPENAI_API_KEY in a .env file in the project root for security.
