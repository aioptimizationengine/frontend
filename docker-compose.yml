services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai_optimization_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-aioptimization}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-aioptimization}
      POSTGRES_DB: ${POSTGRES_DB:-aioptimization}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-aioptimization}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - ai_optimization_network

  # Redis Cache & Tracking Data Store
  redis:
    image: redis:7-alpine
    container_name: ai_optimization_redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - ai_optimization_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai_optimization_backend
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      # API Keys (set these in a .env file in the project root for security)
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # Database
      - DATABASE_URL=postgresql://${POSTGRES_USER:-aioptimization}:${POSTGRES_PASSWORD:-aioptimization}@postgres:5432/${POSTGRES_DB:-aioptimization}
      
      # Redis
      - REDIS_URL=redis://redis:6379
      
      # Application Settings
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-false}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      
      # Tracking
      - ENABLE_REAL_TRACKING=${ENABLE_REAL_TRACKING:-true}
      - GEOIP_PATH=/app/GeoLite2-City.mmdb
      
      # CORS
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:3001}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./backend/GeoLite2-City.mmdb:/app/GeoLite2-City.mmdb:ro
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 5 &&
        echo 'Starting application...' &&
        uvicorn api:app --host 0.0.0.0 --port 8000 --reload
      "
    restart: unless-stopped
    networks:
      - ai_optimization_network

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: ai_optimization_nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./tracking:/usr/share/nginx/html/tracking:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    profiles:
      - production
    restart: unless-stopped
    networks:
      - ai_optimization_network

  # Redis Commander (Development Tool)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ai_optimization_redis_commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    depends_on:
      - redis
    profiles:
      - development
    restart: unless-stopped
    networks:
      - ai_optimization_network

  # pgAdmin (Development Tool)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ai_optimization_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@aioptimization.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    profiles:
      - development
    restart: unless-stopped
    networks:
      - ai_optimization_network

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai_optimization_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    profiles:
      - monitoring
    restart: unless-stopped
    networks:
      - ai_optimization_network

  # Grafana (Monitoring Dashboard)
  grafana:
    image: grafana/grafana:latest
    container_name: ai_optimization_grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    depends_on:
      - prometheus
    profiles:
      - monitoring
    restart: unless-stopped
    networks:
      - ai_optimization_network

  # Log Aggregation (Development/Production)
  loki:
    image: grafana/loki:latest
    container_name: ai_optimization_loki
    ports:
      - "${LOKI_PORT:-3100}:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/loki-config.yml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/loki-config.yml
    profiles:
      - monitoring
    restart: unless-stopped
    networks:
      - ai_optimization_network

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: ai_optimization_backup
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD:-aioptimization}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: /bin/sh -c "chmod +x /backup.sh && crond -f"
    depends_on:
      - postgres
    profiles:
      - production
    restart: unless-stopped
    networks:
      - ai_optimization_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  ai_optimization_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# NOTE: Set your ANTHROPIC_API_KEY and OPENAI_API_KEY in a .env file in the project root for security.
