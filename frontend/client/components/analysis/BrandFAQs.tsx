import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { MessageSquare, Search, Sparkles } from 'lucide-react';
import type { BrandFAQ } from '../../../shared/api';

interface BrandFAQsProps {
  faqs: BrandFAQ[];
  brandName: string;
}

export default function BrandFAQs({ faqs, brandName }: BrandFAQsProps) {
  const [searchTerm, setSearchTerm] = useState('');

  const filteredFAQs = faqs.filter(faq => 
    faq.question.toLowerCase().includes(searchTerm.toLowerCase()) ||
    faq.answer.toLowerCase().includes(searchTerm.toLowerCase()) ||
    (faq.category && faq.category.toLowerCase().includes(searchTerm.toLowerCase()))
  );

  const categories = [...new Set(faqs.map(faq => faq.category).filter(Boolean))];

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center">
          <MessageSquare className="mr-2 h-5 w-5 text-blue-600" />
          AI-Generated Brand FAQs
        </CardTitle>
        <CardDescription>
          {faqs.length} frequently asked questions about {brandName} generated by AI
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Search */}
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
          <Input
            placeholder="Search FAQs..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10"
          />
        </div>

        {/* Categories */}
        {categories.length > 0 && (
          <div className="flex flex-wrap gap-2">
            <span className="text-sm text-gray-600">Categories:</span>
            {categories.map((category, index) => (
              <Badge key={index} variant="secondary" className="text-xs">
                {category}
              </Badge>
            ))}
          </div>
        )}

        {/* FAQs */}
        {filteredFAQs.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            {searchTerm ? 'No FAQs match your search.' : 'No FAQs available.'}
          </div>
        ) : (
          <Accordion type="single" collapsible className="w-full">
            {filteredFAQs.map((faq, index) => (
              <AccordionItem key={index} value={`faq-${index}`}>
                <AccordionTrigger className="text-left hover:no-underline">
                  <div className="flex items-start space-x-2">
                    <Sparkles className="h-4 w-4 text-blue-500 mt-1 flex-shrink-0" />
                    <span className="font-medium">{faq.question}</span>
                  </div>
                </AccordionTrigger>
                <AccordionContent>
                  <div className="pl-6 space-y-2">
                    <p className="text-gray-700 leading-relaxed">{faq.answer}</p>
                    {faq.category && (
                      <Badge variant="outline" className="text-xs">
                        {faq.category}
                      </Badge>
                    )}
                  </div>
                </AccordionContent>
              </AccordionItem>
            ))}
          </Accordion>
        )}

        {/* Stats */}
        <div className="text-xs text-gray-500 pt-4 border-t">
          Showing {filteredFAQs.length} of {faqs.length} FAQs
          {searchTerm && ` matching "${searchTerm}"`}
        </div>
      </CardContent>
    </Card>
  );
}
