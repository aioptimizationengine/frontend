# Postgres service Dockerfile (matches existing data initialized with v17)
FROM postgres:17-alpine

# Set environment defaults (can be overridden by Railway variables)
ENV POSTGRES_DB=aioptimization \
    POSTGRES_USER=aioptimization \
    POSTGRES_PASSWORD=aioptimization \
    PGPORT=5432

# Railway assigns service port by $PORT; map it to Postgres' port
# Postgres listens on 5432; we will start it on PGPORT and expose 5432.
# Railway will handle external port mapping to $PORT.
EXPOSE 5432

# Copy initialization SQL to init directory so it runs on first boot
# This only runs when the data directory is empty (first initialization)
COPY database_setup.sql /docker-entrypoint-initdb.d/01_database_setup.sql

# Add wrapper entrypoint to fix SSL key permissions if present
COPY postgres-entrypoint.sh /usr/local/bin/postgres-entrypoint.sh
RUN chmod +x /usr/local/bin/postgres-entrypoint.sh

# Healthcheck using pg_isready on Railway-assigned $PORT
HEALTHCHECK --interval=10s --timeout=5s --retries=30 \
  CMD sh -lc "pg_isready -h 127.0.0.1 -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" -p \"${PORT:-5432}\" || exit 1"

# Default command (handled by official entrypoint)
# We override the port with PGPORT to align with Railway variable mapping if needed
CMD ["/usr/local/bin/postgres-entrypoint.sh"]
